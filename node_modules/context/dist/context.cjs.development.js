'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function createContext(init) {
  var storage = {
    ancestry: []
  };
  return {
    run: run,
    bind: bind,
    use: use
  };

  function run(ctxRef, fn) {
    var _init;

    var parentContext = use();

    var out = _extends({}, parentContext ? parentContext : {}, (_init = init === null || init === void 0 ? void 0 : init(ctxRef, parentContext)) !== null && _init !== void 0 ? _init : ctxRef);

    var ctx = set(Object.freeze(out));
    storage.ancestry.unshift(ctx);
    var res = fn(ctx);
    clear();
    return res;
  }

  function bind(ctxRef, fn) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    return function () {
      for (var _len2 = arguments.length, runTimeArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        runTimeArgs[_key2] = arguments[_key2];
      }

      return run(ctxRef, function () {
        return fn.apply(void 0, args.concat(runTimeArgs));
      });
    };
  }

  function use() {
    return storage.ctx;
  }

  function set(value) {
    return storage.ctx = value;
  }

  function clear() {
    var _storage$ancestry$;

    storage.ancestry.shift();
    set((_storage$ancestry$ = storage.ancestry[0]) !== null && _storage$ancestry$ !== void 0 ? _storage$ancestry$ : null);
  }
}

exports.default = createContext;
//# sourceMappingURL=context.cjs.development.js.map

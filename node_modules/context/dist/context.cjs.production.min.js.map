{"version":3,"file":"context.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["export default function createContext<T extends Record<string, any>>(\n  init?: (ctxRef: T, parentContext: T | void) => T | null\n) {\n  const storage: { ctx?: T; ancestry: T[] } = { ancestry: [] };\n\n  return {\n    run,\n    bind,\n    use,\n  };\n\n  function run<R>(ctxRef: T, fn: (context: T) => R): R {\n    const parentContext = use();\n\n    const out = {\n      ...(parentContext ? parentContext : {}),\n      ...(init?.(ctxRef, parentContext) ?? ctxRef),\n    };\n\n    const ctx = set(Object.freeze(out));\n    storage.ancestry.unshift(ctx);\n    const res = fn(ctx);\n\n    clear();\n    return res;\n  }\n\n  function bind<R>(ctxRef: T, fn: (...args: any[]) => R, ...args: any[]) {\n    return function(...runTimeArgs: any[]) {\n      return run<R>(ctxRef, function() {\n        return fn(...args, ...runTimeArgs);\n      });\n    };\n  }\n\n  function use() {\n    return storage.ctx;\n  }\n\n  function set(value: T): T {\n    return (storage.ctx = value);\n  }\n\n  function clear() {\n    storage.ancestry.shift();\n    set(storage.ancestry[0] ?? null);\n  }\n}\n"],"names":["init","storage","ancestry","run","bind","ctxRef","fn","args","runTimeArgs","use","parentContext","out","ctx","set","Object","freeze","unshift","res","shift","value"],"mappings":"4SACEA,OAEMC,EAAsC,CAAEC,SAAU,UAEjD,CACLC,IAAAA,EACAC,cAoBeC,EAAWC,8BAA8BC,mCAAAA,2BACjD,sCAAYC,2BAAAA,yBACVL,EAAOE,GAAQ,kBACbC,eAAMC,SAASC,SAtB1BC,IAAAA,YAGON,EAAOE,EAAWC,SACnBI,EAAgBD,IAEhBE,OACAD,GAAgC,aAChCV,MAAAA,SAAAA,EAAOK,EAAQK,kBAAkBL,GAGjCO,EAAMC,EAAIC,OAAOC,OAAOJ,IAC9BV,EAAQC,SAASc,QAAQJ,SACnBK,EAAMX,EAAGM,UAuBfX,EAAQC,SAASgB,QACjBL,YAAIZ,EAAQC,SAAS,kBAAM,MArBpBe,WAWAR,WACAR,EAAQW,aAGRC,EAAIM,UACHlB,EAAQW,IAAMO"}